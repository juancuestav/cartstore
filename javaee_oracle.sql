-- 1. COMPRA -- Registra el usuario, id de pago, fecha, subtotal, iva, total y estado (0)
CREATE OR REPLACE PROCEDURE COMPRAR_PRODUCTOS (USUARIO_ID IN COMPRA.COMP_US_ID%TYPE, SUBTOTAL IN COMPRA.COMP_SUBTOTAL%TYPE, IVA IN COMPRA.COMP_IVA%TYPE, TOTAL IN COMPRA.COMP_TOTAL%TYPE, ID_COMPRA OUT NUMBER) AS
  PAGOID NUMBER;
BEGIN
  GETPAGOID_USUARIO(USUARIO_ID, PAGOID);
  INSERT INTO COMPRA(COMP_US_ID, COMP_PAGO_ID, COMP_FECHA, COMP_SUBTOTAL, COMP_IVA, COMP_TOTAL, COMP_ESTADO) VALUES  (USUARIO_ID, PAGOID, SYSDATE, SUBTOTAL, IVA, TOTAL, 0) RETURNING COMP_ID INTO ID_COMPRA;
END;
/


-- 2. DETALLE_COMPRA -- Registra id de producto, id de la compra, cantidad de producto, precio total del producto (X producto)
CREATE OR REPLACE PROCEDURE AGREGAR_DETALLE_COMPRA (PRODUCT_ID IN DETALLE_COMPRA.DET_PROD_ID%TYPE, COMP_ID IN DETALLE_COMPRA.DET_COMP_ID%TYPE, CANTIDAD IN DETALLE_COMPRA.DET_CANTIDAD%TYPE) AS
  PRECIO_COMPRA NUMBER;
BEGIN
  SELECT PROD_PRECIO INTO PRECIO_COMPRA FROM PRODUCTO WHERE PROD_ID = PRODUCT_ID;
  DBMS_OUTPUT.PUT_LINE('EL PRECIO COMPRA ES: ' || PRECIO_COMPRA);
  INSERT INTO DETALLE_COMPRA(DET_PROD_ID, DET_COMP_ID, DET_CANTIDAD, DET_PRECIO_COMPRA) VALUES (PRODUCT_ID, COMP_ID, CANTIDAD, (PRECIO_COMPRA*CANTIDAD));
END;
/

--SET SERVEROUTPUT ON;
--EXECUTE AGREGAR_DETALLE_COMPRA(PROD_ID => 121, COMP_ID => 1005, CANTIDAD => 5);

-- 3. Minimiza la cantidad de producto en la cantidad especificada (X producto)
  CREATE OR REPLACE PROCEDURE MINIMIZAR_STOCK_PRODUCTO(ID IN PRODUCTO.PROD_ID%TYPE, CANTIDAD IN NUMBER) AS
BEGIN
  IF ID > -1 THEN
    UPDATE PRODUCTO SET PROD_STOCK = (PROD_STOCK - CANTIDAD) WHERE PROD_ID = ID;
  ELSE
    RAISE_APPLICATION_ERROR(-20256, 'El prod_id no debe ser cero ni negativo');
  END IF;
END MINIMIZAR_STOCK_PRODUCTO;
/


-- Obtiene el id de pago del usuario especificado
CREATE OR REPLACE PROCEDURE GETPAGOID_USUARIO (USUARIO_ID IN COMPRA.COMP_US_ID%TYPE , PAGOID OUT COMPRA.COMP_PAGO_ID%TYPE) AS
BEGIN
  SELECT PAGO_ID INTO PAGOID FROM PAGO WHERE PAGO_USU_ID = USUARIO_ID;
END;
/
